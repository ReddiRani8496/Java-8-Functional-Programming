Functional programming:

How to create a list of numbers:  List.of();
List.of() is introduced in java 9.
In java 8 we have Arrays.asList();


1. print list of numbers using structured approach i.e., using loop
2. print list of numbers using streams. conver the list to stream, then use for each loop to print each number
    list.stream().forEach(System.out::println);
    
3. print all even numbers in list using traditional approach
4. print all even numbers in list using functional approach    
5. print even numbers using lambda expression

Exercise 1
Print Only Odd Numbers from the List

Exercise 2
Print All Courses individually

List<String> courses = List.of("Spring", "Spring Boot", "API" , "Microservices", "AWS", "PCF","Azure", "Docker", "Kubernetes")

Exercise 3
Print Courses Containing the word "Spring"

Exercise 4
Print Courses Whose Name has atleast 4 letters



JSHELL
=====

jshell
|  Welcome to JShell -- Version 19.0.2
|  For an introduction type: /help intro

jshell> System.out.println("Hello world");
Hello world

jshell> List<Integer> numbers = List.of(1,2,3,4,5)
numbers ==> [1, 2, 3, 4, 5]

jshell> numbers.stream().reduce(0,(x,y)->x+y)
$3 ==> 15

jshell> 
jshell> numbers.stream().reduce(0,(x,y)->y);
$5 ==> 5

jshell> numbers.stream().reduce(0,(x,y)->x>y?x:y);
$6 ==> 5







Excersie 7 to 9
===============

jshell> numbers.stream().map(number->number*number).reduce(0,(x,y)->(x+y));
$7 ==> 55

jshell> numbers.stream().map(number->number*number*number).reduce(0,(x,y)->(x+y));
$8 ==> 225

jshell> numbers.stream().filter(number -> number%2!=0).reduce(0,(x,y)->(x+y));
$9 ==> 9

jshell> numbers.stream().filter(number -> number%2!=0).reduce(0,Integer::sum);
$9 ==> 9







Print distinct elements in the list:
===================================

jshell> numbers.stream().distinct().forEach(System.out::println);
1
2
3
4
5



Sort elements in the list:
==========================

jshell> numbers.stream().sorted().forEach(System.out::println);
1
2
3
4
5


sort distinct elements in the list:
===================================
jshell> numbers.stream().distinct().sorted().forEach(System.out::println);
1
2
3
4
5


create courses list:
===================

jshell> List<String> courses = Arrays.asList("spring","springboot","api","microservices","AWS","Azure","Docker","kubernates");
courses ==> [spring, springboot, api, microservices, AWS, Azure, Docker, kubernates]

jshell> courses
courses ==> [spring, springboot, api, microservices, AWS, Azure, Docker, kubernates]

sort the courses:
================
jshell> courses.stream().sorted().forEach(System.out::println);
AWS
Azure
Docker
api
kubernates
microservices
spring
springboot



sort using Comparator.naturalOrder():
=====================================

jshell> courses.stream().sorted(Comparator.naturalOrder()).forEach(System.out::println);
AWS
Azure
Docker
api
kubernates
microservices
spring
springboot


sort in reverseOrder:
====================

jshell> courses.stream().sorted(Comparator.reverseOrder()).forEach(System.out::println);
springboot
spring
microservices
kubernates
api
Docker
Azure
AWS


sorting based on length of the courses:
======================================

jshell> courses.stream().sorted(Comparator.comparing(str->str.length())).forEach(System.out::println);
api
AWS
Azure
spring
Docker
springboot




Streams and arrays : while using wrapper classes it has to do unboxing and autoboxing but using primitives it will become easy
==================
jshell> List<Integer> numbers = List.of(1,2,3,4,5,6);
numbers ==> [1, 2, 3, 4, 5, 6]

jshell> numbers.stream();
$2 ==> java.util.stream.ReferencePipeline$Head@27bc2616

jshell> Stream.of(1,2,3,4,5,6,7,8).count();
$3 ==> 8

jshell> Stream.of(1,2,3,4,5,6,7,8).reduce(0,Integer::sum);
$4 ==> 36

jshell> Stream.of(1,2,3,4,5,6,7,8)
$5 ==> java.util.stream.ReferencePipeline$Head@b1bc7ed

jshell> int[] numberArray = {1,2,3,4,5,6,7,8}
numberArray ==> int[8] { 1, 2, 3, 4, 5, 6, 7, 8 }

jshell> Arrays.stream(numberArray);
$7 ==> java.util.stream.IntPipeline$Head@4edde6e5

jshell> Arrays.stream(numberArray).sum()
$8 ==> 36

jshell> Arrays.stream(numberArray).average()
$9 ==> OptionalDouble[4.5]

jshell> Arrays.stream(numberArray).min()
$10 ==> OptionalInt[1]

jshell> Arrays.stream(numberArray).max()
$11 ==> OptionalInt[8]





jshell> IntStream.range(1,10)
$12 ==> java.util.stream.IntPipeline$Head@1f17ae12

jshell> IntStream.range(1,10).sum();
$13 ==> 45

jshell> IntStream.rangeClosed(1,10).sum();
$14 ==> 55


print first 10 odd numbers:
==========================
IntStream.iterate(1, e -> e+2).limit(10).peek(System.out::println).sum();
1
3
5
7
9
11
13
15
17
19
$18 ==> 100

print first 10 even numbers:
============================
jshell> IntStream.iterate(2, e -> e+2).limit(10).peek(System.out::println).sum();
2
4
6
8
10
12
14
16
18
20
$19 ==> 110

print first 10 powers of two:
=============================

jshell> IntStream.iterate(2, e -> e * 2).limit(10).peek(System.out::println).sum();
2
4
6
8
10
12
14
16
18
20
$19 ==> 110





convert result to list : by converting primitives into wrappers
=======================

jshell> IntStream.iterate(2, e -> e+2).limit(10).boxed().collect(Collectors.toList());
$22 ==> [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]


multiply huge numbers:
=====================

It is giving zero because answer will not fit in integer:
----------------------------------------------------------

jshell> IntStream.rangeClosed(1,50).reduce(1,(x,y)->x*y);
$23 ==> 0


It is giving negative number because answer will not fit in integer:
----------------------------------------------------------
jshell> LongStream.rangeClosed(1,50).reduce(1,(x,y)->x*y);
$24 ==> -3258495067890909184






